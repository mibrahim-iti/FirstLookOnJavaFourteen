/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.mibrahim.javafourteen;

import static org.junit.Assert.assertEquals;

import java.io.Serializable;

import org.junit.Test;

import com.mibrahim.javafourteen.switchexpression.Company;
import com.mibrahim.javafourteen.switchexpression.SwitchExpression;

/**
 * A test class just to test methods quickly and not a production tests
 * 
 * So it's not follow a good examples of writing tests
 * 
 * for example i am doing a combination of sucess and failer tests under one test case which shouldn't be a case for a production tests
 * 
 * and even it doesn't cover all possible test cases
 * 
 * @author Mohamed-Ibrahim
 *
 */
public class SwitchStatementTest {

	SwitchExpression se = new SwitchExpression();

	@Test
	public void testSwitchStatementWithBreak() {
		assertEquals("Failure - Not matched company name :(", se.switchStatementWithBreak(Company.RED_SKIOS), SwitchExpression.RED_SKIOS);
		assertEquals("Failure - Not matched company name :(", se.switchStatementWithBreak(Company.FACEBOOK), SwitchExpression.FACEBOOK);
		assertEquals("Failure - Not matching default value :(", se.switchStatementWithBreak(Company.OTHER), SwitchExpression.DEFAULT);
	}

	@Test
	public void testSwitchStatementWithBlock() {
		assertEquals("Failure - Not matched company name :(", se.switchStatementWithBlock(Company.RED_SKIOS), SwitchExpression.RED_SKIOS);
		assertEquals("Failure - Not matched company name :(", se.switchStatementWithBlock(Company.FACEBOOK), SwitchExpression.FACEBOOK);
		assertEquals("Failure - Not matching default value :(", se.switchStatementWithBlock(Company.OTHER), SwitchExpression.DEFAULT);
	}

	@Test
	public void testSwitchStatementWithArrow() {
		assertEquals("Failure - Not matched company name :(", se.switchStatementWithArrow(Company.RED_SKIOS), SwitchExpression.RED_SKIOS);
		assertEquals("Failure - Not matched company name :(", se.switchStatementWithArrow(Company.FACEBOOK), SwitchExpression.FACEBOOK);
		assertEquals("Failure - Not matching default value :(", se.switchStatementWithArrow(Company.OTHER), SwitchExpression.DEFAULT);
	}

	@Test
	public void testSwitchStatementWithArrowAndWithoutDefault() {
		assertEquals("Failure - Not matched company name :(", se.switchStatementWithArrowAndWithoutDefault(Company.RED_SKIOS),
				SwitchExpression.RED_SKIOS);
		assertEquals("Failure - Not matched company name :(", se.switchStatementWithArrowAndWithoutDefault(Company.FACEBOOK),
				SwitchExpression.FACEBOOK);
		assertEquals("Failure - Not matching default value :(", se.switchStatementWithArrowAndWithoutDefault(Company.OTHER), null);
	}

	@Test
	public void testSwitchExpression() {
		assertEquals("Failure - Not matched company name :(", se.switchExpression(Company.RED_SKIOS), SwitchExpression.RED_SKIOS);
		assertEquals("Failure - Not matched company name :(", se.switchExpression(Company.FACEBOOK), SwitchExpression.FACEBOOK);
		assertEquals("Failure - Not matching default value :(", se.switchExpression(Company.OTHER), SwitchExpression.DEFAULT);
	}

	@Test
	public void testSwitchExpressionSupportMultiLines() {
		assertEquals("Failure - Not matched company name :(", se.switchExpressionSupportMultiLines(Company.RED_SKIOS), SwitchExpression.RED_SKIOS);
		assertEquals("Failure - Not matched company name :(", se.switchExpressionSupportMultiLines(Company.FACEBOOK), SwitchExpression.MULTI_LINES);
		assertEquals("Failure - Not matching default value :(", se.switchExpressionSupportMultiLines(Company.OTHER), SwitchExpression.DEFAULT);
	}

	@Test
	public void testDoSomethingWithSwitchExpressionResult() {
		assertEquals("Failure - Not matched company name :(", se.doSomethingWithSwitchExpressionResult(Company.RED_SKIOS),
				String.format("Company name is %s", SwitchExpression.RED_SKIOS));
		assertEquals("Failure - Not matched company name :(", se.doSomethingWithSwitchExpressionResult(Company.FACEBOOK),
				String.format("Company name is %s", SwitchExpression.FACEBOOK));
		assertEquals("Failure - Not matching default value :(", se.doSomethingWithSwitchExpressionResult(Company.OTHER),
				String.format("Company name is %s", SwitchExpression.DEFAULT));
	}

	@Test
	public void testDoSomethingWithSwitchExpressionResultAndUseMultiLines() {
		assertEquals("Failure - Not matched company name :(", se.doSomethingWithSwitchExpressionResultAndUseMultiLines(Company.RED_SKIOS),
				String.format("Company name is %s", SwitchExpression.RED_SKIOS));
		assertEquals("Failure - Not matched company name :(", se.doSomethingWithSwitchExpressionResultAndUseMultiLines(Company.FACEBOOK),
				String.format("Company name is %s", SwitchExpression.MULTI_LINES));
		assertEquals("Failure - Not matching default value :(", se.doSomethingWithSwitchExpressionResultAndUseMultiLines(Company.OTHER),
				String.format("Company name is %s", SwitchExpression.DEFAULT));
	}

	@Test
	public void testSwitchExpressionUsesYieldAndMultiLines() {
		assertEquals("Failure - Not a matched integers :(", se.switchExpressionUsesYieldAndMultiLines(Company.RED_SKIOS), 5);
		assertEquals("Failure - Not a matched integers :(", se.switchExpressionUsesYieldAndMultiLines(Company.FACEBOOK), 3);
		assertEquals("Failure - Not a matched integers :(", se.switchExpressionUsesYieldAndMultiLines(Company.OTHER), 0);
	}

	@Test
	public void testSwitchExpressionUsesLabelRuleOrArrowAndMultiLines() {
		assertEquals("Failure - Not a matched integers :(", se.switchExpressionUsesLabelRuleOrArrowAndMultiLines(Company.RED_SKIOS), 5);
		assertEquals("Failure - Not a matched integers :(", se.switchExpressionUsesLabelRuleOrArrowAndMultiLines(Company.FACEBOOK), 3);
		assertEquals("Failure - Not a matched integers :(", se.switchExpressionUsesLabelRuleOrArrowAndMultiLines(Company.OTHER), 0);
	}

	@Test
	public void testSwitchExpressionReturnOneType() {
		assertEquals("Failure - Not a matched strings :(", se.switchExpressionReturnOneType("TRUE"), "True");
		assertEquals("Failure - Not a matched strings :(", se.switchExpressionReturnOneType("FALSE"), "False");
		assertEquals("Failure - Not a matched strings :(", se.switchExpressionReturnOneType("OTHER"), "No matched condition found.");
	}

	@Test(expected = IllegalArgumentException.class)
	public void testSwitchExpressionReturnPolyType() {
		assertEquals("Failure - Not a matched strings :(", se.switchExpressionReturnPolyType("TRUE"), "True");
		assertEquals("Failure - Not a matched boolean :(", se.switchExpressionReturnPolyType("FALSE"), false);
		se.switchExpressionReturnPolyType("OTHER");// This line will throw an exception
	}

	@Test
	public void testSwitchExpressionWithUnknownTargets() {
		assertEquals("Failure - Not a matched strings :(", se.switchExpressionWithUnknownTargets("TRUE"), "True");
		assertEquals("Failure - Not a matched boolean :(", se.switchExpressionWithUnknownTargets("FALSE"), false);
		// In this case method will not throw any exception but return IllegalArgumentException as a serializable object
		assertEquals("Failure - Not a matched integers :(", se.switchExpressionWithUnknownTargets("OTHER").getClass(),
				IllegalArgumentException.class);
	}

	@Test
	public void testSwitchExpressionWithGeneric() {
		assertEquals("Failure - Not a matched integer type :(", se.switchExpressionWithGeneric(1), Integer.class);
		assertEquals("Failure - Not a matched string type :(", se.switchExpressionWithGeneric(2), String.class);
		assertEquals("Failure - Not a matched serializable type :(", se.switchExpressionWithGeneric(3), Serializable.class);
	}

}
